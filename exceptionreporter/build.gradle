apply plugin: 'com.android.library'
apply plugin: 'spoon'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

version = "1.0"

android {
    compileSdkVersion project.properties.compileSdkVersion
    buildToolsVersion project.properties.buildToolsVersion

    dataBinding {
        enabled true
    }

    defaultConfig {
        minSdkVersion project.properties.minSdkVersion
        targetSdkVersion project.properties.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
      exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
      exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:support-v4:$supportVersion"
    compile("commons-io:commons-io:2.5")

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    androidTestCompile ("com.android.support.test:runner:$testRunnerVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestCompile("com.android.support.test.espresso:espresso-intents:$espressoVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestCompile("commons-io:commons-io:2.5")
}


def siteUrl = 'http://github.com/manishgo/AndroidCrashReporter'
def gitUrl = 'https://github.com/manishgo/AndroidCrashReporter.git'
group = "com.github.manishgo"

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'com.github.manishgo:androidcrashreporter'
                description = 'Report crashes observed in Android Application through email with Logs captured at the time of crash'
                url siteUrl

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'manishgo'
                        name 'Manish Goyal'
                        email 'nishu9601@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "com.github.manishgo:androidcrashreporter"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
        version {
            gpg {
                sign = true
                passphrase = System.getenv('GPG_PASSPHRASE')
            }
        }
    }
}

def shouldPublish() {
    def isPullRequest = System.getenv('TRAVIS_PULL_REQUEST')
    def branch = System.getenv('TRAVIS_BRANCH')
    return isPullRequest == 'false' && branch == 'release'
}

bintrayUpload.onlyIf { shouldPublish() }